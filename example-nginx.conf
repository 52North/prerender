upstream elasticsearch {
    zone elasticsearch 64K;
    server localhost:9200;
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;

    index index.html index.htm index.nginx-debian.html;

    server_name angular_test_server;

    set $prerender 0;
    if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
      	set $prerender 1;
    }
    if ($args ~ "_escaped_fragment_") {
      	set $prerender 1;
    }
    if ($http_user_agent ~ "Prerender") {
      	set $prerender 0;
    }
    if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
      	set $prerender 0;
    }

    location /angular_test {
      	rewrite_log on;
      	error_log /var/log/nginx/localhost.error_log notice;
        #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
        resolver 8.8.8.8;

        if ($prerender = 1) {
            #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
            #set $prerender "$host:3000";
            rewrite .* /$scheme://$host$request_uri? break;
            proxy_pass http://localhost:3000;
        }

      	# support html5mode of angular (fallback to index.html and let angular do the routing)
      	try_files $uri $uri/ /angular_test/index.html;
    }

    location /es/ {
      	rewrite /es/(.*) /$1 break;
      	proxy_pass http://elasticsearch;
      	proxy_redirect http://elasticsearch /es/;
    }

}
